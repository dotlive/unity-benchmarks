// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Protobuf {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Test {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Test() {
      Descriptor = null;
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EmbeddedMessage : pb::GeneratedMessageLite<EmbeddedMessage, EmbeddedMessage.Builder> {
    private EmbeddedMessage() { }
    private static readonly EmbeddedMessage defaultInstance = new EmbeddedMessage().MakeReadOnly();
    private static readonly string[] _embeddedMessageFieldNames = new string[] { "id" };
    private static readonly uint[] _embeddedMessageFieldTags = new uint[] { 8 };
    public static EmbeddedMessage DefaultInstance {
      get { return defaultInstance; }
    }

    public override EmbeddedMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override EmbeddedMessage ThisMessage {
      get { return this; }
    }

    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _embeddedMessageFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) {
        hash ^= id_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      EmbeddedMessage other = obj as EmbeddedMessage;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion

    public static EmbeddedMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EmbeddedMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EmbeddedMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EmbeddedMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EmbeddedMessage MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EmbeddedMessage prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<EmbeddedMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EmbeddedMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private EmbeddedMessage result;

      private EmbeddedMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          EmbeddedMessage original = result;
          result = new EmbeddedMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override EmbeddedMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override EmbeddedMessage DefaultInstanceForType {
        get { return global::Protobuf.EmbeddedMessage.DefaultInstance; }
      }

      public override EmbeddedMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is EmbeddedMessage) {
          return MergeFrom((EmbeddedMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(EmbeddedMessage other) {
        if (other == global::Protobuf.EmbeddedMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_embeddedMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _embeddedMessageFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
    }
    static EmbeddedMessage() {
      object.ReferenceEquals(global::Protobuf.Test.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestMessage : pb::GeneratedMessageLite<TestMessage, TestMessage.Builder> {
    private TestMessage() { }
    private static readonly TestMessage defaultInstance = new TestMessage().MakeReadOnly();
    private static readonly string[] _testMessageFieldNames = new string[] { "embedded", "id", "text" };
    private static readonly uint[] _testMessageFieldTags = new uint[] { 18, 8, 26 };
    public static TestMessage DefaultInstance {
      get { return defaultInstance; }
    }

    public override TestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override TestMessage ThisMessage {
      get { return this; }
    }

    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }

    public const int EmbeddedFieldNumber = 2;
    private bool hasEmbedded;
    private global::Protobuf.EmbeddedMessage embedded_;
    public bool HasEmbedded {
      get { return hasEmbedded; }
    }
    public global::Protobuf.EmbeddedMessage Embedded {
      get { return embedded_ ?? global::Protobuf.EmbeddedMessage.DefaultInstance; }
    }

    public const int TextFieldNumber = 3;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }

    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasEmbedded) return false;
        if (!Embedded.IsInitialized) return false;
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _testMessageFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasEmbedded) {
        output.WriteMessage(2, field_names[0], Embedded);
      }
      if (hasText) {
        output.WriteString(3, field_names[2], Text);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasEmbedded) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Embedded);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Text);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) {
        hash ^= id_.GetHashCode();
      }
      if (hasEmbedded) hash ^= embedded_.GetHashCode();
      if (hasText) {
        hash ^= text_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      TestMessage other = obj as TestMessage;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasEmbedded != other.hasEmbedded || (hasEmbedded && !embedded_.Equals(other.embedded_))) return false;
      if (hasText != other.hasText || (hasText && !text_.Equals(other.text_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("embedded", hasEmbedded, embedded_, writer);
      PrintField("text", hasText, text_, writer);
    }
    #endregion

    public static TestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TestMessage MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TestMessage prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<TestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private TestMessage result;

      private TestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          TestMessage original = result;
          result = new TestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override TestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override TestMessage DefaultInstanceForType {
        get { return global::Protobuf.TestMessage.DefaultInstance; }
      }

      public override TestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is TestMessage) {
          return MergeFrom((TestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(TestMessage other) {
        if (other == global::Protobuf.TestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEmbedded) {
          MergeEmbedded(other.Embedded);
        }
        if (other.HasText) {
          Text = other.Text;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_testMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _testMessageFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::Protobuf.EmbeddedMessage.Builder subBuilder = global::Protobuf.EmbeddedMessage.CreateBuilder();
              if (result.hasEmbedded) {
                subBuilder.MergeFrom(Embedded);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Embedded = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }

      public bool HasEmbedded {
       get { return result.hasEmbedded; }
      }
      public global::Protobuf.EmbeddedMessage Embedded {
        get { return result.Embedded; }
        set { SetEmbedded(value); }
      }
      public Builder SetEmbedded(global::Protobuf.EmbeddedMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmbedded = true;
        result.embedded_ = value;
        return this;
      }
      public Builder SetEmbedded(global::Protobuf.EmbeddedMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEmbedded = true;
        result.embedded_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEmbedded(global::Protobuf.EmbeddedMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEmbedded &&
            result.embedded_ != global::Protobuf.EmbeddedMessage.DefaultInstance) {
            result.embedded_ = global::Protobuf.EmbeddedMessage.CreateBuilder(result.embedded_).MergeFrom(value).BuildPartial();
        } else {
          result.embedded_ = value;
        }
        result.hasEmbedded = true;
        return this;
      }
      public Builder ClearEmbedded() {
        PrepareBuilder();
        result.hasEmbedded = false;
        result.embedded_ = null;
        return this;
      }

      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
    }
    static TestMessage() {
      object.ReferenceEquals(global::Protobuf.Test.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
